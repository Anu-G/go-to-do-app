{"version":3,"sources":["To-Do-List.js","App.js","serviceWorker.js","index.js"],"names":["ToDoList","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","getTasks","onChange","event","setState","defineProperty","target","name","value","onSubmit","items","JSON","parse","localStorage","getItem","item","task","state","status","push","setItem","stringify","sort","a","b","map","index","color","cardBackground","background","taskComplete","textDecoration","react_default","createElement","Card","key","fluid","style","Content","Header","textAlign","wordWrap","Meta","Icon","link","onClick","updateTask","paddingRight","undoTask","deleteTask","console","log","splice","className","as","fontFamily","fontSize","title","href","rel","Form","Input","type","placeholder","Group","Component","App","Container","To_Do_List","Boolean","window","location","hostname","match","ReactDOM","render","src_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mVA2KeA,cAvKb,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACjBE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAQRQ,kBAAoB,WAClBP,EAAKQ,YAVYR,EAanBS,SAAW,SAAAC,GACTV,EAAKW,SAALV,OAAAW,EAAA,EAAAX,CAAA,GACGS,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,SAfnBf,EAmBnBgB,SAAW,WACT,IAAIC,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAC/B,MAATJ,IACFA,EAAQ,IAEV,IAAIK,EAAO,CACTC,KAAMvB,EAAKwB,MAAMD,KACjBE,QAAQ,GAEVR,EAAMS,KAAKJ,GACXF,aAAaO,QAAQ,QAAST,KAAKU,UAAUX,IAG7CjB,EAAKW,SAAS,CAAEY,KAAM,KACtBvB,EAAKQ,YAjCYR,EAoCnBQ,SAAW,WACT,IAAIS,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UACxCJ,IACFA,EAAQA,EAAMY,KAAK,SAACC,EAAGC,GACrB,OAAID,EAAEL,OACG,EACEM,EAAEN,QACH,EAEH,IAGTL,aAAaO,QAAQ,QAAST,KAAKU,UAAUX,IAE7CjB,EAAKW,SAAS,CACZM,MAAOA,EAAMe,IAAI,SAACV,EAAMW,GACtB,IAAIC,EAAQ,SACRC,EAAiB,CAAEC,WAAY,SAC/BC,EAAe,CAAEC,eAAgB,QAMrC,OALIhB,EAAKG,SACPS,EAAQ,QACRC,EAAeC,WAAa,QAC5BC,EAAY,eAAqB,gBAGjCE,EAAAT,EAAAU,cAACC,EAAA,EAAD,CAAMC,IAAKT,EAAOC,MAAOA,EAAOS,OAAK,EAACC,MAAOT,GAC3CI,EAAAT,EAAAU,cAACC,EAAA,EAAKI,QAAN,KACEN,EAAAT,EAAAU,cAACC,EAAA,EAAKK,OAAN,CAAaC,UAAU,OAAOH,MAAOP,GACnCE,EAAAT,EAAAU,cAAA,OAAKI,MAAO,CAAEI,SAAU,eAAiB1B,EAAKC,OAGhDgB,EAAAT,EAAAU,cAACC,EAAA,EAAKQ,KAAN,CAAWF,UAAU,SACnBR,EAAAT,EAAAU,cAACU,EAAA,EAAD,CACEC,MAAI,EACJrC,KAAK,eACLoB,MAAM,QACNkB,QAAS,kBAAMpD,EAAKqD,WAAWpB,MAEjCM,EAAAT,EAAAU,cAAA,QAAMI,MAAO,CAAEU,aAAc,KAA7B,QACAf,EAAAT,EAAAU,cAACU,EAAA,EAAD,CACEC,MAAI,EACJrC,KAAK,OACLoB,MAAM,SACNkB,QAAS,kBAAMpD,EAAKuD,SAAStB,MAE/BM,EAAAT,EAAAU,cAAA,QAAMI,MAAO,CAAEU,aAAc,KAA7B,QACAf,EAAAT,EAAAU,cAACU,EAAA,EAAD,CACEC,MAAI,EACJrC,KAAK,SACLoB,MAAM,MACNkB,QAAS,kBAAMpD,EAAKwD,WAAWvB,MAEjCM,EAAAT,EAAAU,cAAA,QAAMI,MAAO,CAAEU,aAAc,KAA7B,mBAxFGtD,EAkGnBqD,WAAa,SAAApB,GACX,IAAIhB,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAC5CJ,EAAMgB,GAAOR,QAAS,EACtBL,aAAaO,QAAQ,QAAST,KAAKU,UAAUX,IAC7CjB,EAAKQ,YAtGYR,EAyGnBuD,SAAW,SAAAtB,GACT,IAAIhB,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAC5CJ,EAAMgB,GAAOR,QAAS,EACtBL,aAAaO,QAAQ,QAAST,KAAKU,UAAUX,IAC7CjB,EAAKQ,YA7GYR,EAgHnBwD,WAAa,SAAAvB,GACXwB,QAAQC,IAAI,gBAAiBzB,GAC7B,IAAIhB,EAAQC,KAAKC,MAAMC,aAAaC,QAAQ,UAC5CJ,EAAM0C,OAAO1B,EAAO,GACpBb,aAAaO,QAAQ,QAAST,KAAKU,UAAUX,IAC7CjB,EAAKQ,YAlHLR,EAAKwB,MAAQ,CACXD,KAAM,GACNN,MAAO,IALQjB,wEAyHjB,OACEuC,EAAAT,EAAAU,cAAA,WACED,EAAAT,EAAAU,cAAA,OAAKoB,UAAU,OACbrB,EAAAT,EAAAU,cAACM,EAAA,EAAD,CACEc,UAAU,SACVC,GAAG,IACHjB,MAAO,CACLkB,WAAY,+BACZC,SAAU,SAGZxB,EAAAT,EAAAU,cAAA,OAAKI,MAAO,CAAEU,aAAc,UAA5B,OACMf,EAAAT,EAAAU,cAAA,KAAGI,MAAO,CAAEV,MAAO,YAAnB,MADN,WAEO,KAETK,EAAAT,EAAAU,cAAA,KACEwB,MAAM,cACNC,KAAK,gEACLpD,OAAO,SACPqD,IAAI,uBAEJ3B,EAAAT,EAAAU,cAACU,EAAA,EAAD,CAAMpC,KAAK,OAAOqC,KAAK,SANzB,gBAUFZ,EAAAT,EAAAU,cAAA,OAAKoB,UAAU,OACbrB,EAAAT,EAAAU,cAAC2B,EAAA,EAAD,CAAMnD,SAAUb,KAAKa,UACnBuB,EAAAT,EAAAU,cAAC4B,EAAA,EAAD,CACEC,KAAK,OACLvD,KAAK,OACLL,SAAUN,KAAKM,SACfM,MAAOZ,KAAKqB,MAAMD,KAClBoB,OAAK,EACL2B,YAAY,kBAKlB/B,EAAAT,EAAAU,cAAA,OAAKoB,UAAU,OACbrB,EAAAT,EAAAU,cAACC,EAAA,EAAK8B,MAAN,KAAapE,KAAKqB,MAAMP,gBAjKXuD,aCYRC,MAVf,WACE,OACElC,EAAAT,EAAAU,cAAA,WACED,EAAAT,EAAAU,cAACkC,EAAA,EAAD,KACEnC,EAAAT,EAAAU,cAACmC,EAAD,SCGYC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO3C,EAAAT,EAAAU,cAAC2C,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.e4bc4fc1.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Card, Header, Form, Input, Icon } from \"semantic-ui-react\";\r\n\r\nclass ToDoList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      task: \"\",\r\n      items: []\r\n    };\r\n  }\r\n\r\n  componentDidMount = () => {\r\n    this.getTasks();\r\n  };\r\n\r\n  onChange = event => {\r\n    this.setState({\r\n      [event.target.name]: event.target.value\r\n    });\r\n  };\r\n\r\n  onSubmit = () => {\r\n    let items = JSON.parse(localStorage.getItem(\"items\"));\r\n    if (items == null) {\r\n      items = [];\r\n    }\r\n    let item = {\r\n      task: this.state.task,\r\n      status: false\r\n    };\r\n    items.push(item);\r\n    localStorage.setItem(\"items\", JSON.stringify(items));\r\n\r\n    // clear the form\r\n    this.setState({ task: \"\" });\r\n    this.getTasks();\r\n  };\r\n\r\n  getTasks = () => {\r\n    let items = JSON.parse(localStorage.getItem(\"items\"));\r\n    if (items) {\r\n      items = items.sort((a, b) => {\r\n        if (a.status) {\r\n          return 1;\r\n        } else if (b.status) {\r\n          return -1;\r\n        }\r\n        return 0;\r\n      });\r\n      // console.log(n, items);\r\n      localStorage.setItem(\"items\", JSON.stringify(items));\r\n\r\n      this.setState({\r\n        items: items.map((item, index) => {\r\n          let color = \"yellow\";\r\n          let cardBackground = { background: \"white\" };\r\n          let taskComplete = { textDecoration: \"none\" };\r\n          if (item.status) {\r\n            color = \"green\";\r\n            cardBackground.background = \"beige\";\r\n            taskComplete[\"textDecoration\"] = \"line-through\";\r\n          }\r\n          return (\r\n            <Card key={index} color={color} fluid style={cardBackground}>\r\n              <Card.Content>\r\n                <Card.Header textAlign=\"left\" style={taskComplete}>\r\n                  <div style={{ wordWrap: \"break-word\" }}>{item.task}</div>\r\n                </Card.Header>\r\n\r\n                <Card.Meta textAlign=\"right\">\r\n                  <Icon\r\n                    link\r\n                    name=\"check circle\"\r\n                    color=\"green\"\r\n                    onClick={() => this.updateTask(index)}\r\n                  />\r\n                  <span style={{ paddingRight: 10 }}>Done</span>\r\n                  <Icon\r\n                    link\r\n                    name=\"undo\"\r\n                    color=\"yellow\"\r\n                    onClick={() => this.undoTask(index)}\r\n                  />\r\n                  <span style={{ paddingRight: 10 }}>Undo</span>\r\n                  <Icon\r\n                    link\r\n                    name=\"delete\"\r\n                    color=\"red\"\r\n                    onClick={() => this.deleteTask(index)}\r\n                  />\r\n                  <span style={{ paddingRight: 10 }}>Delete</span>\r\n                </Card.Meta>\r\n              </Card.Content>\r\n            </Card>\r\n          );\r\n        })\r\n      });\r\n    }\r\n  };\r\n\r\n  updateTask = index => {\r\n    let items = JSON.parse(localStorage.getItem(\"items\"));\r\n    items[index].status = true;\r\n    localStorage.setItem(\"items\", JSON.stringify(items));\r\n    this.getTasks();\r\n  };\r\n\r\n  undoTask = index => {\r\n    let items = JSON.parse(localStorage.getItem(\"items\"));\r\n    items[index].status = false;\r\n    localStorage.setItem(\"items\", JSON.stringify(items));\r\n    this.getTasks();\r\n  };\r\n\r\n  deleteTask = index => {\r\n    console.log(\"inside delete\", index);\r\n    let items = JSON.parse(localStorage.getItem(\"items\"));\r\n    items.splice(index, 1);\r\n    localStorage.setItem(\"items\", JSON.stringify(items));\r\n    this.getTasks();\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <div className=\"row\">\r\n          <Header\r\n            className=\"header\"\r\n            as=\"a\"\r\n            style={{\r\n              fontFamily: \"Permanent Marker, sans-serif\",\r\n              fontSize: \"50px\"\r\n            }}\r\n          >\r\n            <fff style={{ paddingRight: \"300px\" }}>\r\n              Get <c style={{ color: \"#A9A9A9\" }}>Sh</c>it Done\r\n            </fff>{\" \"}\r\n          </Header>\r\n          <a\r\n            title=\"Source Code\"\r\n            href=\"https://github.com/schadokar/go-to-do-app/tree/offlineToDoApp\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n            <Icon name=\"code\" link=\"true\" />\r\n            Source Code\r\n          </a>\r\n        </div>\r\n        <div className=\"row\">\r\n          <Form onSubmit={this.onSubmit}>\r\n            <Input\r\n              type=\"text\"\r\n              name=\"task\"\r\n              onChange={this.onChange}\r\n              value={this.state.task}\r\n              fluid\r\n              placeholder=\"Create Shit\"\r\n            />\r\n            {/* <Button >Create Task</Button> */}\r\n          </Form>\r\n        </div>\r\n        <div className=\"row\">\r\n          <Card.Group>{this.state.items}</Card.Group>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default ToDoList;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport { Container } from \"semantic-ui-react\";\nimport ToDoList from \"./To-Do-List\";\n\nfunction App() {\n  return (\n    <div>\n      <Container>\n        <ToDoList />\n      </Container>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}